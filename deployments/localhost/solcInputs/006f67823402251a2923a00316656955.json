{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/core/interfaces/IKYC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../libraries/Types.sol\";\n\ninterface IKYC {\n    /// @notice SetUserData is used to set User data and mapped to it address\n    function setUserData(\n        string memory _name,\n        string memory _father_name,\n        string memory _mother_name,\n        string memory _grandFather_name,\n        string memory _phone_number,\n        string memory _dob,\n        string memory _blood_group,\n        string memory _citizenship_number,\n        string memory _pan_number,\n        string memory _location\n    ) external;\n\n    /// @notice Verify whether the Kyc details is signed by the right DataProviderAddress\n    function verify(\n        address walletAddress,\n        bytes memory signature\n    ) external returns (bool);\n\n    /// @notice generateHash is call the getEthSignedMessageHash and retun the hashed signature of\n    function generateHash(address walletAddress) external returns (bytes32);\n\n    /// @notice GEtUserDAta is function which provide the specific KYC datg to user who request to See Details.\n    function getUserData(\n        address dataProvider,\n        string memory data\n    ) external returns (string memory);\n}\n"
    },
    "contracts/core/interfaces/INTNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface INTNFT {\n    /*///////////////////////////////////////////////////////////////////////////////\n                           Events\n    //////////////////////////////////////////////////////////////////////////////*/\n    // event Attest(address indexed to, uint indexed tokenId);\n    // event Revoke(address indexed to, uint indexed tokenId);\n\n    /// @notice allows an address to mint an NFT.\n    function mintNft() external returns (uint256);\n\n    /// @notice allows an owner of the NFT to burn it.\n    function burn(uint tokenId) external;\n\n    // function revoke(uint tokenId) external;\n\n    /// @notice gets the tokenCounter.\n    function getTokenCounter() external view returns (uint);\n\n    function hasMinted(address minter) external view returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IOxAuth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IOxAuth {\n    /*///////////////////////////////////////////////////////////////////////////////\n                           Events\n    //////////////////////////////////////////////////////////////////////////////*/\n    event ApproveRequest(\n        address indexed requester,\n        address indexed to,\n        string indexed data\n    );\n\n    event AccessGrant(\n        address indexed approver,\n        address indexed thirdParty,\n        string indexed data\n    );\n\n    // event GrantRevoke(\n    //     address indexed approver,\n    //     address indexed requester,\n    //     string data\n    // );\n\n    /// @notice requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider\n    function requestApproveFromDataProvider(\n        address dataProvider,\n        string memory data\n    ) external;\n\n    /// @notice grantAccessToRequester grant the permission to DataRequestor\n    function grantAccessToRequester(\n        address dataRequester,\n        string memory data\n    ) external;\n\n    /// @notice approveCondition is just a getter function to receieve whether it is approved or not\n    function approveCondition(\n        address dataRequester,\n        address dataProvider,\n        string memory data\n    ) external returns (bool);\n\n    // function revokeGrant(\n    //     address walletAddress,\n    //     address thirdParty,\n    //     string memory data\n    // ) external;\n}\n"
    },
    "contracts/core/KYC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {IKYC} from \"./interfaces/IKYC.sol\";\nimport {Types} from \"./libraries/Types.sol\";\nimport {IOxAuth} from \"./interfaces/IOxAuth.sol\";\nimport {OxAuth} from \"./OxAuth.sol\";\nimport {INTNFT} from \"./interfaces/INTNFT.sol\";\n\n/*///////////////////////////////////////////////////////////////////////////////\n                           CUSTOME ERROR \n//////////////////////////////////////////////////////////////////////////////*/\n\nerror KYC__INVALIDSignatureLength();\nerror KYC__CannotViewData();\nerror KYC__DataDoesNotExist();\nerror KYC__FieldDoesNotExist();\nerror KYC__AddressHasNotMinted();\nerror KYC__NotYetApprovedToEncryptWithPublicKey();\nerror KYC__NotOwner();\n\n/// @title KYC Interaction\n/// @author Spooderman\n/// @author daleon\n/// @notice KYC is place where user come and fill the kyc details and user can request to view other user's KYC\n\ncontract KYC is IKYC, OxAuth {\n    /// @notice This mapped the user details according to their address\n    mapping(address => Types.UserDetail) private s_userEncryptedInfo;\n\n    /// @notice Mapped hased of User details to its address\n    mapping(address => bytes32) private s_hashedData;\n\n    mapping(address => mapping(address => mapping(string => string)))\n        private retievableData;\n\n    // mapping(address => Types.UserDetail) private s_retrieveInfo;\n\n    address private immutable nftAddress;\n\n    constructor(address _nftAddress) {\n        nftAddress = _nftAddress;\n    }\n\n    modifier onlyMinted() {\n        if (!INTNFT(nftAddress).hasMinted(msg.sender)) {\n            revert KYC__AddressHasNotMinted();\n        }\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           SetUserDATA \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice SetUserData is used to set User data and mapped to it address\n    /// @param  _name User's Name\n    /// @param  _father_name User's Father Name\n    /// @param  _mother_name User's Mother Name\n    /// @param  _grandFather_name User's GrandFather Name\n    /// @param  _phone_number User's Phone_Number details\n    /// @param  _dob User's Date of Birth\n    /// @param  _blood_group User's Blood Group\n    /// @param  _citizenship_number User's CitizenShip_number\n    /// @param  _pan_number User's pan Number\n    /// @param  _location User's Location\n    function setUserData(\n        string memory _name,\n        string memory _father_name,\n        string memory _mother_name,\n        string memory _grandFather_name,\n        string memory _phone_number,\n        string memory _dob,\n        string memory _blood_group,\n        string memory _citizenship_number,\n        string memory _pan_number,\n        string memory _location\n    ) external onlyMinted {\n        //mapped deployer address and provide their details\n\n        s_userEncryptedInfo[msg.sender] = Types.UserDetail(\n            _name,\n            _father_name,\n            _mother_name,\n            _grandFather_name,\n            _phone_number,\n            _dob,\n            _blood_group,\n            _citizenship_number,\n            _pan_number,\n            _location,\n            false\n        );\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                         GetMessageHash                           \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice GetMessageHash is used to hash User details using Keccak 256\n    /// @param dataProviderAddress address of the KycDataProvider\n    /// @return bytes32 Keccak256 hash value of the User details\n    function getMessageHash(\n        address dataProviderAddress\n    ) private view returns (bytes32) {\n        // access the struct datatypes from Types.UserDetail\n\n        Types.UserDetail memory userData = s_userEncryptedInfo[\n            dataProviderAddress\n        ];\n\n        // perform keccak256 and produce the unique has of represent data\n\n        return\n            keccak256(\n                abi.encodePacked(\n                    userData.name,\n                    userData.father_name,\n                    userData.mother_name,\n                    userData.grandFather_name,\n                    userData.phone_number,\n                    userData.dob,\n                    userData.citizenship_number,\n                    userData.pan_number,\n                    userData.location\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           getEthSignedMessageHash \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice getEtheSignedMessageHash allows to generate signature that is signed by data Provider Address\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\n    /// @dev generate the Signature that proves the particular accound signed the message\n    /// @return the Bytes32 address of the signature which represent the address signed the message\n    function getEthSignedMessageHash(\n        address dataProviderAddress\n    ) private returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\n        */\n        bytes32 data = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                getMessageHash(dataProviderAddress)\n            )\n        );\n\n        // mapped the bytes32 hashed signature to  data provider address in storage variable\n\n        s_hashedData[dataProviderAddress] = data;\n\n        return data;\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                                 generateHash \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice generateHash is call the getEthSignedMessageHash and retun the hashed signature of\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\n    /// @return message digest of signature\n    function generateHash(\n        address dataProviderAddress\n    ) external override returns (bytes32) {\n        // call the getEtheSignedMessageHash function and generate Ethereum signed message and KYC details\n        return getEthSignedMessageHash(dataProviderAddress);\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                                  VERIFY\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Verify whether the Kyc details is signed by the right DataProviderAddress\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\n    /// @return bool true if it signed by correct signer or false\n    function verify(\n        address dataProviderAddress,\n        bytes memory signature\n    ) external override returns (bool) {\n        // get the ethSignedMessageHash from signer address ie dataProvideraddress\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(\n            dataProviderAddress\n        );\n\n        // Check whethere EthsginedMessageHash and signature represent the rigth Kyc data Provider\n        if (\n            recoverSigner(ethSignedMessageHash, signature) ==\n            dataProviderAddress\n        ) {\n            return s_userEncryptedInfo[dataProviderAddress].isVerified = true;\n        } else {\n            return false;\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                              RECOVER Signer \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice recoverSigner allows the SC to validate the incoming data is properly signed\n    /// @param _ethSignedMessageHash It is SignedMessageHash of ethereum signature and Kyc details\n    /// @param _signature It is the signature of Kyc details signed\n    /// @return address is return from ecrecover\n    function recoverSigner(\n        bytes32 _ethSignedMessageHash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        // seperate into r, s, v to pass in ecrecover\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                              splitSignature\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice splitSignature is used to extract `r`, `s` and `v` values from a signature passed as byte array\n    /// @param sig this is signature that represent the exact dataprovider who signed the message\n    /// @dev perform signature split r+v+s => r=> 32byte , v=>32byte, s=1byte\n    function splitSignature(\n        bytes memory sig\n    ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // require(sig.length == 65, \"invalid signature length\");\n        if (sig.length != 65) {\n            revert KYC__INVALIDSignatureLength();\n        }\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                              getEthHashedData \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice getEthhashedData is getter function which react the hashData from storage variable who is mapped through address\n    /// @param dataProviderAddress It is the signer of Kyc data or KYC provider.\n    /// @return messageDigest of KYC_details\n    function getEthHashedData(\n        address dataProviderAddress\n    ) external view returns (bytes32) {\n        return s_hashedData[dataProviderAddress];\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                               Get User Data \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice GEtUserDAta is function which provide the specific KYC datg to user who request to See Details.\n    /// @param  dataProvider It is address where dataRequestor is requesting to view the data\n    /// @param  data This represent the specific field of KYC form such as name, dob and so forth\n    /// @retun return the string datatype of specific field of KYC from\n\n    /// Requestor first need to get approved to view data\n    function getUserData(\n        address dataProvider,\n        string memory data\n    ) external view returns (string memory) {\n        // require(\n        //     OxAuth._Approve[dataProvider][msg.sender][data] == true,\n        //     \"not access yet\"\n        // );\n        if (dataProvider != msg.sender) {\n            revert KYC__NotOwner();\n        }\n\n        if (keccak256(abi.encode(\"name\")) == keccak256(abi.encode(data))) {\n            return s_userEncryptedInfo[dataProvider].name;\n        } else if (\n            keccak256(abi.encode(\"father_name\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].father_name;\n        } else if (\n            keccak256(abi.encode(\"mother_name\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].mother_name;\n        } else if (\n            keccak256(abi.encode(\"grandFather_name\")) ==\n            keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].grandFather_name;\n        } else if (\n            keccak256(abi.encode(\"phone_number\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].phone_number;\n        } else if (\n            keccak256(abi.encode(\"dob\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].dob;\n        } else if (\n            keccak256(abi.encode(\"blood_group\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].blood_group;\n        } else if (\n            keccak256(abi.encode(\"citizenship_number\")) ==\n            keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].citizenship_number;\n        } else if (\n            keccak256(abi.encode(\"pan_number\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].pan_number;\n        } else if (\n            keccak256(abi.encode(\"location\")) == keccak256(abi.encode(data))\n        ) {\n            return s_userEncryptedInfo[dataProvider].location;\n        } else {\n            revert KYC__DataDoesNotExist();\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                               Update the existing data \n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice UpdateKycDetails is function which updatee the specific KYC data .\n    /// @param  kycField This represent the specific field of KYC form such as name, dob and so forth\n    /// @param  data that need to be update\n\n    function updateKYCDetails(\n        string memory kycField,\n        string memory data\n    ) external {\n        if (keccak256(abi.encode(\"name\")) == keccak256(abi.encode(kycField))) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"father_name\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"mother_name\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"grandFather_name\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"phone_number\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"dob\")) == keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"blood_group\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"citizenship_number\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"pan_number\")) ==\n            keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else if (\n            keccak256(abi.encode(\"location\")) == keccak256(abi.encode(kycField))\n        ) {\n            s_userEncryptedInfo[msg.sender].name = data;\n        } else {\n            revert KYC__FieldDoesNotExist();\n        }\n    }\n\n    function storeinRetrievable(\n        address dataRequester,\n        string memory kycField,\n        string memory data\n    ) external {\n        if (!OxAuth._Approve[msg.sender][dataRequester][kycField]) {\n            revert KYC__NotYetApprovedToEncryptWithPublicKey();\n        }\n        retievableData[msg.sender][dataRequester][kycField] = data;\n    }\n\n    function getUserDataFromRequester(\n        address dataProvider,\n        string memory kycField\n    ) external view returns (string memory) {\n        require(\n            OxAuth._Approve[dataProvider][msg.sender][kycField] == true,\n            \"not access yet\"\n        );\n        return retievableData[dataProvider][msg.sender][kycField];\n    }\n}\n"
    },
    "contracts/core/libraries/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary Types {\n    struct UserDetail {\n        string name;\n        string father_name;\n        string mother_name;\n        string grandFather_name;\n        string phone_number;\n        string dob;\n        string blood_group;\n        string citizenship_number;\n        string pan_number;\n        string location;\n        bool isVerified;\n    }\n}\n"
    },
    "contracts/core/NTNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./interfaces/INTNFT.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*///////////////////////////////////////////////////////////////////////////////\n                           CUSTOME ERROR \n//////////////////////////////////////////////////////////////////////////////*/\n\nerror NTNFT__NftNotTransferrable();\nerror NTNFT__CanOnlyMintOnce();\n\n/// @title OxAuth\n/// @author Spooderman\n/// @author daleon\n/// @notice OxAuth provides the functionality to mint soul bound token but only one address could mint once.\n\ncontract NTNFT is INTNFT, ERC721 {\n    /// @notice this constant variable stores the link of the IPFS on which the actual image of the NFT lies.\n    string private constant _TOKEN_URI =\n        \"https://ipfs.io/ipfs/Qmcx9T9WYxU2wLuk5bptJVwqjtxQPL8SxjgUkoEaDqWzti?filename=BasicNFT.png\";\n\n    /// @notice id of the NFT.\n\n    uint256 private s_tokenCounter;\n\n    /// @notice this mapping stores whether that particular address has already minted NFT or not.\n\n    mapping(address => bool) private _minter;\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           Constructor\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice Gives name and symbol to the NFT.\n\n    constructor() ERC721(\"OxAuth\", \"Ox\") {\n        // s_tokenCounter = 0;\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           Modifier\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice passes if an address has not minted NFT before else reverts.\n\n    modifier onlyOnceMint() {\n        if (_minter[msg.sender]) {\n            revert NTNFT__CanOnlyMintOnce();\n        }\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           mintNft\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice allows an address to mint an NFT.\n\n    function mintNft() external override onlyOnceMint returns (uint256) {\n        _safeMint(msg.sender, s_tokenCounter);\n        _minter[msg.sender] = true;\n        s_tokenCounter++;\n        return s_tokenCounter;\n    }\n\n    // // function _beforeTokenTransfer(\n    // //     address from,\n    // //     address to,\n    // //     uint256 /*tokenId*/,\n    // //     uint256 /*batchSize*/\n    // // ) internal pure override {\n    // //     if (from != address(0) || to != address(0)) {\n    // //         revert NtNft__NftNotTransferrable();\n    // //     }\n    // // }\n\n    // function _afterTokenTransfer(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId,\n    //     uint256 /*batchSize*/\n    // ) internal override {\n    //     if (from == address(0)) {\n    //         emit Attest(to, tokenId);\n    //     } else if (to == address(0)) {\n    //         emit Revoke(to, tokenId);\n    //     }\n    // }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           burn\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice allows an owner of the NFT to burn it.\n    /// @param tokenId id of an NFT.\n\n    function burn(uint tokenId) external override {\n        if (ownerOf(tokenId) != msg.sender) {\n            revert NTNFT__NftNotTransferrable();\n        }\n        _minter[msg.sender] = false;\n        _burn(tokenId);\n    }\n\n    // function revoke(uint tokenId) external override onlyOwner {\n    //     _burn(tokenId);\n    // }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           View and Pure Functions\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice gets the token URI of an NFT.\n\n    function tokenURI(\n        uint /*tokenId*/\n    ) public pure override returns (string memory) {\n        return _TOKEN_URI;\n    }\n\n    /// @notice gets the tokenCounter.\n    function getTokenCounter() external view returns (uint) {\n        return s_tokenCounter;\n    }\n\n    /// @notice returns whether an address has minted NFT or not\n    function hasMinted(address minter) external view returns (bool) {\n        return _minter[minter];\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           Transfers and Approve Functions\n    ///////////////////////////////////////////////////////////////////////////////*/\n\n    /// --- Disabling Transfer Of Soulbound NFT --- ///\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function safeTransferFrom(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public pure override {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function safeTransferFrom(address, address, uint256) public pure override {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function transferFrom(address, address, uint256) public pure override {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function approve(address, uint256) public pure override {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function setApprovalForAll(address, bool) public pure override {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function getApproved(uint256) public pure override returns (address) {\n        revert NTNFT__NftNotTransferrable();\n    }\n\n    /// @notice Function disabled as cannot transfer a soulbound nft\n    function isApprovedForAll(\n        address,\n        address\n    ) public pure override returns (bool) {\n        revert NTNFT__NftNotTransferrable();\n    }\n}\n"
    },
    "contracts/core/OxAuth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {IOxAuth} from \"./interfaces/IOxAuth.sol\";\n\n/*///////////////////////////////////////////////////////////////////////////////\n                           CUSTOME ERROR \n//////////////////////////////////////////////////////////////////////////////*/\n\nerror OxAuth__OnlyOnceAllowed();\nerror OxAuth__NotApprover();\nerror OxAuth__NotApprovedToView();\nerror OxAuth__TimeFinishedToView();\nerror OxAuth__NotDataProvider();\n\n/// @title OxAuth\n/// @author Spooderman\n/// @author daleon\n/// @notice OxAuth provider the functionality of authorization and validation to fill and retrieve the data\n\ncontract OxAuth is IOxAuth {\n    /// @notice this mapped DataProvider address and DataRequestor address and specific data that Viewer want to see\n    /// return mapped in bool format\n    mapping(address => mapping(address => mapping(string => bool)))\n        internal _Approve;\n\n    // check mapped data being asked or not asked through enum\n    // enum Status {\n    //     notAsked,\n    //     Asked\n    // }\n\n    // check whether data is already send to data Requestor\n    // Implemenation for Further use\n\n    // enum dataStatus {\n    //     locked,\n    //     notLocked\n    // }\n\n    /// mapped the address of and status of data that has been asked\n    /// mapping(address => Status) private _ApproveStatus;\n\n    // mapped the Requested Data that user want to receieve.\n    mapping(address => mapping(address => string)) private _RequestedData;\n\n    // mapped Data status to prevent the duplication of data when requesting data\n    // mapping(address => mapping(string => dataStatus)) private _DataStatus;\n\n    /// mapped the timeInterval when data is requested\n\n    //mapping(address => mapping(string => uint)) private _RequestTimeInterval;\n    //mapping(address => mapping(address => mapping(string => uint))) private _StartingTimeInterval;\n\n    // modifier onlyOnce() {\n    //     if (_ApproveStatus[msg.sender] == Status.Asked) {\n    //         revert OxAuth__OnlyOnceAllowed();\n    //     }\n    //     _;\n    // }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           onlyRequestedAccount\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice validation to check whether right caller is right requester\n    /// @param requestAddress represent the address who is requesting data from KYC data Provider\n    /// @param data represent data field of KYC\n\n    modifier onlyRequestedAccount(address requestAddress, string memory data) {\n        // dataMapped store that Keccka256 on the basis of particular KYC data field\n        if (\n            keccak256(\n                abi.encodePacked(_RequestedData[msg.sender][requestAddress])\n            ) == keccak256(abi.encode(data))\n        ) {\n            // checks the requested data is already mapped or not\n            revert OxAuth__NotApprover();\n        }\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           requestApproveFromDataProvider\n    //////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider\n    /// @param dataProvider who represent the address of data Provider who fill the KYC data\n    /// @param data shows the requested Kyc data field that is requested by data Requestor\n    function requestApproveFromDataProvider(\n        address dataProvider,\n        string memory data\n    ) external {\n        _RequestedData[dataProvider][msg.sender] = data;\n        emit ApproveRequest(dataProvider, msg.sender, data);\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           grantAccessToRequestor\n    ///////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice grantAccessToRequester grant the permission to DataRequestor\n    /// @param dataRequester address of the dataRequestor\n    /// @param data represent the data specific Kyc data field that requestor requesting\n    function grantAccessToRequester(\n        address dataRequester,\n        string memory data\n    )\n        external\n        override\n        /* onlyOnce*/ onlyRequestedAccount(dataRequester, data)\n    {\n        if (\n            keccak256(abi.encode(_RequestedData[msg.sender][dataRequester])) !=\n            keccak256(abi.encode(data))\n        ) {\n            revert OxAuth__NotDataProvider();\n        }\n        _Approve[msg.sender][dataRequester][data] = true;\n        // _StartingTimeInterval[dataProvider][dataRequester][data] = block\n        //     .timestamp;\n        emit AccessGrant(msg.sender, dataRequester, data);\n    }\n\n    /*///////////////////////////////////////////////////////////////////////////////\n                           approveCondition\n    ///////////////////////////////////////////////////////////////////////////////*/\n\n    /// @notice approveCondition is just a getter function to receieve whether it is approved or not\n    /// @param dataRequester address of data Requester\n    /// @param dataProvider address who provide specific kyc data to requestor\n    function approveCondition(\n        address dataRequester,\n        address dataProvider,\n        string memory data /*onlyAtTime(walletAddress, data)*/\n    ) external view override returns (bool) {\n        return _Approve[dataProvider][dataRequester][data];\n    }\n\n    // function revokeGrant(\n    //     address dataProvider,\n    //     address dataRequester,\n    //     string memory data\n    // ) external override onlyRequestedAccount(dataProvider, data) {\n    //     _Approve[dataProvider][dataRequester][data] = false;\n    //     emit GrantRevoke(dataProvider, dataRequester, data);\n    // }\n}\n"
    },
    "contracts/periphery/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IRouter {\n    function getNft() external returns (uint);\n\n    function burnNft(uint tokenId) external;\n\n    // function revokeNft(uint tokenId) external;\n\n    function fillKycDetails(\n        string memory _name,\n        string memory _father_name,\n        string memory _mother_name,\n        string memory _grandFather_name,\n        string memory _phone_number,\n        string memory _dob,\n        string memory _blood_group,\n        string memory _citizenship_number,\n        string memory _pan_number,\n        string memory _location\n    ) external;\n\n    function getHash(address walletAddress) external returns (bytes32);\n\n    function verifySignature(\n        address walletAddress,\n        bytes memory signature\n    ) external;\n\n    function requestDataFromOtherAddress(\n        address walletAddress,\n        string memory data\n    ) external;\n\n    function approveOthersRequest(\n        // address approver,\n        address thirdParty,\n        string memory data\n    ) external;\n\n    function displayApprovedData(\n        address walletAddress,\n        string memory data\n    ) external returns (string memory);\n\n    function removeApprove(address thirdParty, string memory data) external;\n}\n"
    },
    "contracts/periphery/Router.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n\n// pragma solidity 0.8.17;\n\n// import \"./interfaces/IRouter.sol\";\n// import \"../core/interfaces/INTNFT.sol\";\n// import \"../core/interfaces/IKYC.sol\";\n\n// contract Router is IRouter {\n//     address private immutable nftAddress;\n//     address private immutable kycAddress;\n\n//     constructor(address _nftAddress, address _kycAddress) {\n//         nftAddress = _nftAddress;\n//         kycAddress = _kycAddress;\n//     }\n\n//     function getNft() public override returns (uint) {\n//         return INTNFT(nftAddress).mintNft(msg.sender);\n//     }\n\n//     function burnNft(uint tokenId) public override {\n//         INTNFT(nftAddress).burn(tokenId);\n//     }\n\n//     // function revokeNft(uint tokenId) public override {\n//     //     INTNFT(nftAddress).revoke(tokenId);\n//     // }\n\n//     function fillKycDetails(\n//         string memory _name,\n//         string memory _father_name,\n//         string memory _mother_name,\n//         string memory _grandFather_name,\n//         string memory _phone_number,\n//         string memory _dob,\n//         string memory _blood_group,\n//         string memory _citizenship_number,\n//         string memory _pan_number,\n//         string memory _location\n//     ) public override {\n//         IKYC(kycAddress).getUserData(\n//             msg.sender,\n//             _name,\n//             _father_name,\n//             _mother_name,\n//             _grandFather_name,\n//             _phone_number,\n//             _dob,\n//             _blood_group,\n//             _citizenship_number,\n//             _pan_number,\n//             _location\n//         );\n//     }\n\n//     function getHash(address walletAddress) public override returns (bytes32) {\n//         return IKYC(kycAddress).generateHash(walletAddress);\n//     }\n\n//     function verifySignature(\n//         address walletAddress,\n//         bytes memory signature\n//     ) public override {\n//         IKYC(kycAddress).verify(walletAddress, signature);\n//     }\n\n//     function requestDataFromOtherAddress(\n//         address walletAddress,\n//         string memory data\n//     ) public override {\n//         IKYC(kycAddress).requestForApproval(walletAddress, msg.sender, data);\n//     }\n\n//     function approveOthersRequest(\n//         // address approver,\n//         address thirdParty,\n//         string memory data\n//     ) public override {\n//         IKYC(kycAddress).grantTheRequest(msg.sender, thirdParty, data);\n//     }\n\n//     function displayApprovedData(\n//         address walletAddress,\n//         string memory data\n//     ) public override returns (string memory) {\n//         return IKYC(kycAddress).displayData(walletAddress, msg.sender, data);\n//     }\n\n//     function removeApprove(\n//         address thirdParty,\n//         string memory data\n//     ) public override {\n//         IKYC(kycAddress).revokeApprove(msg.sender, thirdParty, data);\n//     }\n// }\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}