{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "KYC__AddressHasNotMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYC__DataDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYC__FieldDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYC__INVALIDSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYC__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYC__NotYetApprovedToEncryptWithPublicKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OxAuth__NotApprover",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OxAuth__NotDataProvider",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "thirdParty",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "AccessGrant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "ApproveRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataRequester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataProvider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "approveCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProviderAddress",
          "type": "address"
        }
      ],
      "name": "generateHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProviderAddress",
          "type": "address"
        }
      ],
      "name": "getEthHashedData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProvider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProvider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "kycField",
          "type": "string"
        }
      ],
      "name": "getUserDataFromRequester",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataRequester",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "grantAccessToRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProvider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "requestApproveFromDataProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_father_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_mother_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_grandFather_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_phone_number",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dob",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_blood_group",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_citizenship_number",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pan_number",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        }
      ],
      "name": "setUserData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataRequester",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "kycField",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "storeinRetrievable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "kycField",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "updateKYCDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProviderAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb8c9ea1b49a96f8b20ff07f65318e15f689093118f5f024865ccf399c476246",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3358074",
    "logsBloom": "0x
    "blockHash": "0xe33d694b9b6fb6817bae1762ac06eb6156faf037275f1f65d75e4c8f6d8dd3a2",
    "transactionHash": "0xfb8c9ea1b49a96f8b20ff07f65318e15f689093118f5f024865ccf399c476246",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3358074",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "006f67823402251a2923a00316656955",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KYC__AddressHasNotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYC__DataDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYC__FieldDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYC__INVALIDSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYC__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYC__NotYetApprovedToEncryptWithPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OxAuth__NotApprover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OxAuth__NotDataProvider\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thirdParty\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"ApproveRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataRequester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"approveCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProviderAddress\",\"type\":\"address\"}],\"name\":\"generateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProviderAddress\",\"type\":\"address\"}],\"name\":\"getEthHashedData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"kycField\",\"type\":\"string\"}],\"name\":\"getUserDataFromRequester\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataRequester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"grantAccessToRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"requestApproveFromDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_father_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mother_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_grandFather_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dob\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_blood_group\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_citizenship_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pan_number\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"}],\"name\":\"setUserData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataRequester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"kycField\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"storeinRetrievable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"kycField\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateKYCDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProviderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Spoodermandaleon\",\"kind\":\"dev\",\"methods\":{\"approveCondition(address,address,string)\":{\"params\":{\"dataProvider\":\"address who provide specific kyc data to requestor\",\"dataRequester\":\"address of data Requester\"}},\"generateHash(address)\":{\"params\":{\"dataProviderAddress\":\"It is address of the User who filled the Kyc details\"},\"returns\":{\"_0\":\"message digest of signature\"}},\"getEthHashedData(address)\":{\"params\":{\"dataProviderAddress\":\"It is the signer of Kyc data or KYC provider.\"},\"returns\":{\"_0\":\"messageDigest of KYC_details\"}},\"grantAccessToRequester(address,string)\":{\"params\":{\"data\":\"represent the data specific Kyc data field that requestor requesting\",\"dataRequester\":\"address of the dataRequestor\"}},\"requestApproveFromDataProvider(address,string)\":{\"params\":{\"data\":\"shows the requested Kyc data field that is requested by data Requestor\",\"dataProvider\":\"who represent the address of data Provider who fill the KYC data\"}},\"setUserData(string,string,string,string,string,string,string,string,string,string)\":{\"params\":{\"_blood_group\":\"User's Blood Group\",\"_citizenship_number\":\"User's CitizenShip_number\",\"_dob\":\"User's Date of Birth\",\"_father_name\":\"User's Father Name\",\"_grandFather_name\":\"User's GrandFather Name\",\"_location\":\"User's Location\",\"_mother_name\":\"User's Mother Name\",\"_name\":\"User's Name\",\"_pan_number\":\"User's pan Number\",\"_phone_number\":\"User's Phone_Number details\"}},\"updateKYCDetails(string,string)\":{\"params\":{\"data\":\"that need to be update\",\"kycField\":\"This represent the specific field of KYC form such as name, dob and so forth\"}},\"verify(address,bytes)\":{\"params\":{\"dataProviderAddress\":\"It is address of the User who filled the Kyc details\"},\"returns\":{\"_0\":\"bool true if it signed by correct signer or false\"}}},\"title\":\"KYC Interaction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveCondition(address,address,string)\":{\"notice\":\"approveCondition is just a getter function to receieve whether it is approved or not\"},\"generateHash(address)\":{\"notice\":\"generateHash is call the getEthSignedMessageHash and retun the hashed signature of\"},\"getEthHashedData(address)\":{\"notice\":\"getEthhashedData is getter function which react the hashData from storage variable who is mapped through address\"},\"getUserData(address,string)\":{\"notice\":\"Requestor first need to get approved to view data\"},\"grantAccessToRequester(address,string)\":{\"notice\":\"grantAccessToRequester grant the permission to DataRequestor\"},\"requestApproveFromDataProvider(address,string)\":{\"notice\":\"requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider\"},\"setUserData(string,string,string,string,string,string,string,string,string,string)\":{\"notice\":\"SetUserData is used to set User data and mapped to it address\"},\"updateKYCDetails(string,string)\":{\"notice\":\"UpdateKycDetails is function which updatee the specific KYC data .\"},\"verify(address,bytes)\":{\"notice\":\"Verify whether the Kyc details is signed by the right DataProviderAddress\"}},\"notice\":\"KYC is place where user come and fill the kyc details and user can request to view other user's KYC\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/KYC.sol\":\"KYC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/KYC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IKYC} from \\\"./interfaces/IKYC.sol\\\";\\nimport {Types} from \\\"./libraries/Types.sol\\\";\\nimport {IOxAuth} from \\\"./interfaces/IOxAuth.sol\\\";\\nimport {OxAuth} from \\\"./OxAuth.sol\\\";\\nimport {INTNFT} from \\\"./interfaces/INTNFT.sol\\\";\\n\\n/*///////////////////////////////////////////////////////////////////////////////\\n                           CUSTOME ERROR \\n//////////////////////////////////////////////////////////////////////////////*/\\n\\nerror KYC__INVALIDSignatureLength();\\nerror KYC__CannotViewData();\\nerror KYC__DataDoesNotExist();\\nerror KYC__FieldDoesNotExist();\\nerror KYC__AddressHasNotMinted();\\nerror KYC__NotYetApprovedToEncryptWithPublicKey();\\nerror KYC__NotOwner();\\n\\n/// @title KYC Interaction\\n/// @author Spooderman\\n/// @author daleon\\n/// @notice KYC is place where user come and fill the kyc details and user can request to view other user's KYC\\n\\ncontract KYC is IKYC, OxAuth {\\n    /// @notice This mapped the user details according to their address\\n    mapping(address => Types.UserDetail) private s_userEncryptedInfo;\\n\\n    /// @notice Mapped hased of User details to its address\\n    mapping(address => bytes32) private s_hashedData;\\n\\n    mapping(address => mapping(address => mapping(string => string)))\\n        private retievableData;\\n\\n    // mapping(address => Types.UserDetail) private s_retrieveInfo;\\n\\n    address private immutable nftAddress;\\n\\n    constructor(address _nftAddress) {\\n        nftAddress = _nftAddress;\\n    }\\n\\n    modifier onlyMinted() {\\n        if (!INTNFT(nftAddress).hasMinted(msg.sender)) {\\n            revert KYC__AddressHasNotMinted();\\n        }\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           SetUserDATA \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice SetUserData is used to set User data and mapped to it address\\n    /// @param  _name User's Name\\n    /// @param  _father_name User's Father Name\\n    /// @param  _mother_name User's Mother Name\\n    /// @param  _grandFather_name User's GrandFather Name\\n    /// @param  _phone_number User's Phone_Number details\\n    /// @param  _dob User's Date of Birth\\n    /// @param  _blood_group User's Blood Group\\n    /// @param  _citizenship_number User's CitizenShip_number\\n    /// @param  _pan_number User's pan Number\\n    /// @param  _location User's Location\\n    function setUserData(\\n        string memory _name,\\n        string memory _father_name,\\n        string memory _mother_name,\\n        string memory _grandFather_name,\\n        string memory _phone_number,\\n        string memory _dob,\\n        string memory _blood_group,\\n        string memory _citizenship_number,\\n        string memory _pan_number,\\n        string memory _location\\n    ) external onlyMinted {\\n        //mapped deployer address and provide their details\\n\\n        s_userEncryptedInfo[msg.sender] = Types.UserDetail(\\n            _name,\\n            _father_name,\\n            _mother_name,\\n            _grandFather_name,\\n            _phone_number,\\n            _dob,\\n            _blood_group,\\n            _citizenship_number,\\n            _pan_number,\\n            _location,\\n            false\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                         GetMessageHash                           \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice GetMessageHash is used to hash User details using Keccak 256\\n    /// @param dataProviderAddress address of the KycDataProvider\\n    /// @return bytes32 Keccak256 hash value of the User details\\n    function getMessageHash(\\n        address dataProviderAddress\\n    ) private view returns (bytes32) {\\n        // access the struct datatypes from Types.UserDetail\\n\\n        Types.UserDetail memory userData = s_userEncryptedInfo[\\n            dataProviderAddress\\n        ];\\n\\n        // perform keccak256 and produce the unique has of represent data\\n\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    userData.name,\\n                    userData.father_name,\\n                    userData.mother_name,\\n                    userData.grandFather_name,\\n                    userData.phone_number,\\n                    userData.dob,\\n                    userData.citizenship_number,\\n                    userData.pan_number,\\n                    userData.location\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           getEthSignedMessageHash \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice getEtheSignedMessageHash allows to generate signature that is signed by data Provider Address\\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\\n    /// @dev generate the Signature that proves the particular accound signed the message\\n    /// @return the Bytes32 address of the signature which represent the address signed the message\\n    function getEthSignedMessageHash(\\n        address dataProviderAddress\\n    ) private returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        bytes32 data = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                getMessageHash(dataProviderAddress)\\n            )\\n        );\\n\\n        // mapped the bytes32 hashed signature to  data provider address in storage variable\\n\\n        s_hashedData[dataProviderAddress] = data;\\n\\n        return data;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                                 generateHash \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice generateHash is call the getEthSignedMessageHash and retun the hashed signature of\\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\\n    /// @return message digest of signature\\n    function generateHash(\\n        address dataProviderAddress\\n    ) external override returns (bytes32) {\\n        // call the getEtheSignedMessageHash function and generate Ethereum signed message and KYC details\\n        return getEthSignedMessageHash(dataProviderAddress);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                                  VERIFY\\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Verify whether the Kyc details is signed by the right DataProviderAddress\\n    /// @param dataProviderAddress It is address of the User who filled the Kyc details\\n    /// @return bool true if it signed by correct signer or false\\n    function verify(\\n        address dataProviderAddress,\\n        bytes memory signature\\n    ) external override returns (bool) {\\n        // get the ethSignedMessageHash from signer address ie dataProvideraddress\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(\\n            dataProviderAddress\\n        );\\n\\n        // Check whethere EthsginedMessageHash and signature represent the rigth Kyc data Provider\\n        if (\\n            recoverSigner(ethSignedMessageHash, signature) ==\\n            dataProviderAddress\\n        ) {\\n            return s_userEncryptedInfo[dataProviderAddress].isVerified = true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                              RECOVER Signer \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice recoverSigner allows the SC to validate the incoming data is properly signed\\n    /// @param _ethSignedMessageHash It is SignedMessageHash of ethereum signature and Kyc details\\n    /// @param _signature It is the signature of Kyc details signed\\n    /// @return address is return from ecrecover\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        // seperate into r, s, v to pass in ecrecover\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                              splitSignature\\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice splitSignature is used to extract `r`, `s` and `v` values from a signature passed as byte array\\n    /// @param sig this is signature that represent the exact dataprovider who signed the message\\n    /// @dev perform signature split r+v+s => r=> 32byte , v=>32byte, s=1byte\\n    function splitSignature(\\n        bytes memory sig\\n    ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        // require(sig.length == 65, \\\"invalid signature length\\\");\\n        if (sig.length != 65) {\\n            revert KYC__INVALIDSignatureLength();\\n        }\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                              getEthHashedData \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice getEthhashedData is getter function which react the hashData from storage variable who is mapped through address\\n    /// @param dataProviderAddress It is the signer of Kyc data or KYC provider.\\n    /// @return messageDigest of KYC_details\\n    function getEthHashedData(\\n        address dataProviderAddress\\n    ) external view returns (bytes32) {\\n        return s_hashedData[dataProviderAddress];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                               Get User Data \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice GEtUserDAta is function which provide the specific KYC datg to user who request to See Details.\\n    /// @param  dataProvider It is address where dataRequestor is requesting to view the data\\n    /// @param  data This represent the specific field of KYC form such as name, dob and so forth\\n    /// @retun return the string datatype of specific field of KYC from\\n\\n    /// Requestor first need to get approved to view data\\n    function getUserData(\\n        address dataProvider,\\n        string memory data\\n    ) external view returns (string memory) {\\n        // require(\\n        //     OxAuth._Approve[dataProvider][msg.sender][data] == true,\\n        //     \\\"not access yet\\\"\\n        // );\\n        if (dataProvider != msg.sender) {\\n            revert KYC__NotOwner();\\n        }\\n\\n        if (keccak256(abi.encode(\\\"name\\\")) == keccak256(abi.encode(data))) {\\n            return s_userEncryptedInfo[dataProvider].name;\\n        } else if (\\n            keccak256(abi.encode(\\\"father_name\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].father_name;\\n        } else if (\\n            keccak256(abi.encode(\\\"mother_name\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].mother_name;\\n        } else if (\\n            keccak256(abi.encode(\\\"grandFather_name\\\")) ==\\n            keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].grandFather_name;\\n        } else if (\\n            keccak256(abi.encode(\\\"phone_number\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].phone_number;\\n        } else if (\\n            keccak256(abi.encode(\\\"dob\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].dob;\\n        } else if (\\n            keccak256(abi.encode(\\\"blood_group\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].blood_group;\\n        } else if (\\n            keccak256(abi.encode(\\\"citizenship_number\\\")) ==\\n            keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].citizenship_number;\\n        } else if (\\n            keccak256(abi.encode(\\\"pan_number\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].pan_number;\\n        } else if (\\n            keccak256(abi.encode(\\\"location\\\")) == keccak256(abi.encode(data))\\n        ) {\\n            return s_userEncryptedInfo[dataProvider].location;\\n        } else {\\n            revert KYC__DataDoesNotExist();\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                               Update the existing data \\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice UpdateKycDetails is function which updatee the specific KYC data .\\n    /// @param  kycField This represent the specific field of KYC form such as name, dob and so forth\\n    /// @param  data that need to be update\\n\\n    function updateKYCDetails(\\n        string memory kycField,\\n        string memory data\\n    ) external {\\n        if (keccak256(abi.encode(\\\"name\\\")) == keccak256(abi.encode(kycField))) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"father_name\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"mother_name\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"grandFather_name\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"phone_number\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"dob\\\")) == keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"blood_group\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"citizenship_number\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"pan_number\\\")) ==\\n            keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else if (\\n            keccak256(abi.encode(\\\"location\\\")) == keccak256(abi.encode(kycField))\\n        ) {\\n            s_userEncryptedInfo[msg.sender].name = data;\\n        } else {\\n            revert KYC__FieldDoesNotExist();\\n        }\\n    }\\n\\n    function storeinRetrievable(\\n        address dataRequester,\\n        string memory kycField,\\n        string memory data\\n    ) external {\\n        if (!OxAuth._Approve[msg.sender][dataRequester][kycField]) {\\n            revert KYC__NotYetApprovedToEncryptWithPublicKey();\\n        }\\n        retievableData[msg.sender][dataRequester][kycField] = data;\\n    }\\n\\n    function getUserDataFromRequester(\\n        address dataProvider,\\n        string memory kycField\\n    ) external view returns (string memory) {\\n        require(\\n            OxAuth._Approve[dataProvider][msg.sender][kycField] == true,\\n            \\\"not access yet\\\"\\n        );\\n        return retievableData[dataProvider][msg.sender][kycField];\\n    }\\n}\\n\",\"keccak256\":\"0x53e27e6099a015bd317bf0b2b3bbaf9b4a2ddbb2465160a0841aba942ed3022f\",\"license\":\"MIT\"},\"contracts/core/OxAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IOxAuth} from \\\"./interfaces/IOxAuth.sol\\\";\\n\\n/*///////////////////////////////////////////////////////////////////////////////\\n                           CUSTOME ERROR \\n//////////////////////////////////////////////////////////////////////////////*/\\n\\nerror OxAuth__OnlyOnceAllowed();\\nerror OxAuth__NotApprover();\\nerror OxAuth__NotApprovedToView();\\nerror OxAuth__TimeFinishedToView();\\nerror OxAuth__NotDataProvider();\\n\\n/// @title OxAuth\\n/// @author Spooderman\\n/// @author daleon\\n/// @notice OxAuth provider the functionality of authorization and validation to fill and retrieve the data\\n\\ncontract OxAuth is IOxAuth {\\n    /// @notice this mapped DataProvider address and DataRequestor address and specific data that Viewer want to see\\n    /// return mapped in bool format\\n    mapping(address => mapping(address => mapping(string => bool)))\\n        internal _Approve;\\n\\n    // check mapped data being asked or not asked through enum\\n    // enum Status {\\n    //     notAsked,\\n    //     Asked\\n    // }\\n\\n    // check whether data is already send to data Requestor\\n    // Implemenation for Further use\\n\\n    // enum dataStatus {\\n    //     locked,\\n    //     notLocked\\n    // }\\n\\n    /// mapped the address of and status of data that has been asked\\n    /// mapping(address => Status) private _ApproveStatus;\\n\\n    // mapped the Requested Data that user want to receieve.\\n    mapping(address => mapping(address => string)) private _RequestedData;\\n\\n    // mapped Data status to prevent the duplication of data when requesting data\\n    // mapping(address => mapping(string => dataStatus)) private _DataStatus;\\n\\n    /// mapped the timeInterval when data is requested\\n\\n    //mapping(address => mapping(string => uint)) private _RequestTimeInterval;\\n    //mapping(address => mapping(address => mapping(string => uint))) private _StartingTimeInterval;\\n\\n    // modifier onlyOnce() {\\n    //     if (_ApproveStatus[msg.sender] == Status.Asked) {\\n    //         revert OxAuth__OnlyOnceAllowed();\\n    //     }\\n    //     _;\\n    // }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           onlyRequestedAccount\\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice validation to check whether right caller is right requester\\n    /// @param requestAddress represent the address who is requesting data from KYC data Provider\\n    /// @param data represent data field of KYC\\n\\n    modifier onlyRequestedAccount(address requestAddress, string memory data) {\\n        // dataMapped store that Keccka256 on the basis of particular KYC data field\\n        if (\\n            keccak256(\\n                abi.encodePacked(_RequestedData[msg.sender][requestAddress])\\n            ) == keccak256(abi.encode(data))\\n        ) {\\n            // checks the requested data is already mapped or not\\n            revert OxAuth__NotApprover();\\n        }\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           requestApproveFromDataProvider\\n    //////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider\\n    /// @param dataProvider who represent the address of data Provider who fill the KYC data\\n    /// @param data shows the requested Kyc data field that is requested by data Requestor\\n    function requestApproveFromDataProvider(\\n        address dataProvider,\\n        string memory data\\n    ) external {\\n        _RequestedData[dataProvider][msg.sender] = data;\\n        emit ApproveRequest(dataProvider, msg.sender, data);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           grantAccessToRequestor\\n    ///////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice grantAccessToRequester grant the permission to DataRequestor\\n    /// @param dataRequester address of the dataRequestor\\n    /// @param data represent the data specific Kyc data field that requestor requesting\\n    function grantAccessToRequester(\\n        address dataRequester,\\n        string memory data\\n    )\\n        external\\n        override\\n        /* onlyOnce*/ onlyRequestedAccount(dataRequester, data)\\n    {\\n        if (\\n            keccak256(abi.encode(_RequestedData[msg.sender][dataRequester])) !=\\n            keccak256(abi.encode(data))\\n        ) {\\n            revert OxAuth__NotDataProvider();\\n        }\\n        _Approve[msg.sender][dataRequester][data] = true;\\n        // _StartingTimeInterval[dataProvider][dataRequester][data] = block\\n        //     .timestamp;\\n        emit AccessGrant(msg.sender, dataRequester, data);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           approveCondition\\n    ///////////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice approveCondition is just a getter function to receieve whether it is approved or not\\n    /// @param dataRequester address of data Requester\\n    /// @param dataProvider address who provide specific kyc data to requestor\\n    function approveCondition(\\n        address dataRequester,\\n        address dataProvider,\\n        string memory data /*onlyAtTime(walletAddress, data)*/\\n    ) external view override returns (bool) {\\n        return _Approve[dataProvider][dataRequester][data];\\n    }\\n\\n    // function revokeGrant(\\n    //     address dataProvider,\\n    //     address dataRequester,\\n    //     string memory data\\n    // ) external override onlyRequestedAccount(dataProvider, data) {\\n    //     _Approve[dataProvider][dataRequester][data] = false;\\n    //     emit GrantRevoke(dataProvider, dataRequester, data);\\n    // }\\n}\\n\",\"keccak256\":\"0x8dcb7ab554c83fea1e29118a149e3d8cd498ba3501926a4408d8c425cd5013ab\",\"license\":\"MIT\"},\"contracts/core/interfaces/IKYC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../libraries/Types.sol\\\";\\n\\ninterface IKYC {\\n    /// @notice SetUserData is used to set User data and mapped to it address\\n    function setUserData(\\n        string memory _name,\\n        string memory _father_name,\\n        string memory _mother_name,\\n        string memory _grandFather_name,\\n        string memory _phone_number,\\n        string memory _dob,\\n        string memory _blood_group,\\n        string memory _citizenship_number,\\n        string memory _pan_number,\\n        string memory _location\\n    ) external;\\n\\n    /// @notice Verify whether the Kyc details is signed by the right DataProviderAddress\\n    function verify(\\n        address walletAddress,\\n        bytes memory signature\\n    ) external returns (bool);\\n\\n    /// @notice generateHash is call the getEthSignedMessageHash and retun the hashed signature of\\n    function generateHash(address walletAddress) external returns (bytes32);\\n\\n    /// @notice GEtUserDAta is function which provide the specific KYC datg to user who request to See Details.\\n    function getUserData(\\n        address dataProvider,\\n        string memory data\\n    ) external returns (string memory);\\n}\\n\",\"keccak256\":\"0xfe17851059d77ee2483c8a9c98e1d746e939bf1e2dedf49c758e14c2789e095a\",\"license\":\"MIT\"},\"contracts/core/interfaces/INTNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface INTNFT {\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           Events\\n    //////////////////////////////////////////////////////////////////////////////*/\\n    // event Attest(address indexed to, uint indexed tokenId);\\n    // event Revoke(address indexed to, uint indexed tokenId);\\n\\n    /// @notice allows an address to mint an NFT.\\n    function mintNft() external returns (uint256);\\n\\n    /// @notice allows an owner of the NFT to burn it.\\n    function burn(uint tokenId) external;\\n\\n    // function revoke(uint tokenId) external;\\n\\n    /// @notice gets the tokenCounter.\\n    function getTokenCounter() external view returns (uint);\\n\\n    function hasMinted(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb23c8eb09ae85d02165859c4708474c69627f424814a6ecda86faab95acc32c9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOxAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOxAuth {\\n    /*///////////////////////////////////////////////////////////////////////////////\\n                           Events\\n    //////////////////////////////////////////////////////////////////////////////*/\\n    event ApproveRequest(\\n        address indexed requester,\\n        address indexed to,\\n        string indexed data\\n    );\\n\\n    event AccessGrant(\\n        address indexed approver,\\n        address indexed thirdParty,\\n        string indexed data\\n    );\\n\\n    // event GrantRevoke(\\n    //     address indexed approver,\\n    //     address indexed requester,\\n    //     string data\\n    // );\\n\\n    /// @notice requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider\\n    function requestApproveFromDataProvider(\\n        address dataProvider,\\n        string memory data\\n    ) external;\\n\\n    /// @notice grantAccessToRequester grant the permission to DataRequestor\\n    function grantAccessToRequester(\\n        address dataRequester,\\n        string memory data\\n    ) external;\\n\\n    /// @notice approveCondition is just a getter function to receieve whether it is approved or not\\n    function approveCondition(\\n        address dataRequester,\\n        address dataProvider,\\n        string memory data\\n    ) external returns (bool);\\n\\n    // function revokeGrant(\\n    //     address walletAddress,\\n    //     address thirdParty,\\n    //     string memory data\\n    // ) external;\\n}\\n\",\"keccak256\":\"0x06bc958bfe7340bfd924ef626d7e9e93db1c6d9673f7763f5d98391b94929c79\",\"license\":\"MIT\"},\"contracts/core/libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Types {\\n    struct UserDetail {\\n        string name;\\n        string father_name;\\n        string mother_name;\\n        string grandFather_name;\\n        string phone_number;\\n        string dob;\\n        string blood_group;\\n        string citizenship_number;\\n        string pan_number;\\n        string location;\\n        bool isVerified;\\n    }\\n}\\n\",\"keccak256\":\"0x78877ea91dfee66a0ed78cf3732cb7d1ed2f3db346f72670a2cbb0b6cc061f4b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003cfd38038062003cfd8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051613bd36200012a60003960006109e10152613bd36000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063852beb5611610071578063852beb5614610176578063b5722cc714610192578063b5a89065146101ae578063df4f3547146101de578063f2aeb8521461020e578063ff841e0f1461022a576100a9565b806321a3f733146100ae5780634a41d1ac146100de57806351f1dd771461010e57806365ca9ba11461012a5780636ba4e0dc14610146575b600080fd5b6100c860048036038101906100c39190612948565b61025a565b6040516100d5919061298e565b60405180910390f35b6100f860048036038101906100f39190612aef565b61026c565b6040516101059190612b66565b60405180910390f35b61012860048036038101906101239190612c22565b610324565b005b610144600480360381019061013f9190612c9a565b6109df565b005b610160600480360381019061015b9190612e91565b610c4b565b60405161016d9190612f6c565b60405180910390f35b610190600480360381019061018b9190612e91565b610e61565b005b6101ac60048036038101906101a79190612f8e565b611189565b005b6101c860048036038101906101c39190612e91565b61130f565b6040516101d59190612f6c565b60405180910390f35b6101f860048036038101906101f39190613019565b611f0c565b6040516102059190612b66565b60405180910390f35b61022860048036038101906102239190612e91565b611fbc565b005b610244600480360381019061023f9190612948565b6120ba565b604051610251919061298e565b60405180910390f35b600061026582612103565b9050919050565b60008061027884612103565b90508373ffffffffffffffffffffffffffffffffffffffff1661029b8285612184565b73ffffffffffffffffffffffffffffffffffffffff1603610318576001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a0160006101000a81548160ff021916908315150217905591505061031e565b60009150505b92915050565b816040516020016103359190612f6c565b6040516020818303038152906040528051906020012060405160200161035a906130d4565b60405160208183030381529060405280519060200120036103ca5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816103c4919061330a565b506109db565b816040516020016103db9190612f6c565b6040516020818303038152906040528051906020012060405160200161040090613428565b60405160208183030381529060405280519060200120036104705780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161046a919061330a565b506109da565b816040516020016104819190612f6c565b604051602081830303815290604052805190602001206040516020016104a690613494565b60405160208183030381529060405280519060200120036105165780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019081610510919061330a565b506109d9565b816040516020016105279190612f6c565b6040516020818303038152906040528051906020012060405160200161054c90613500565b60405160208183030381529060405280519060200120036105bc5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816105b6919061330a565b506109d8565b816040516020016105cd9190612f6c565b604051602081830303815290604052805190602001206040516020016105f29061356c565b60405160208183030381529060405280519060200120036106625780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161065c919061330a565b506109d7565b816040516020016106739190612f6c565b60405160208183030381529060405280519060200120604051602001610698906135d8565b60405160208183030381529060405280519060200120036107085780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019081610702919061330a565b506109d6565b816040516020016107199190612f6c565b6040516020818303038152906040528051906020012060405160200161073e90613644565b60405160208183030381529060405280519060200120036107ae5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816107a8919061330a565b506109d5565b816040516020016107bf9190612f6c565b604051602081830303815290604052805190602001206040516020016107e4906136b0565b60405160208183030381529060405280519060200120036108545780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161084e919061330a565b506109d4565b816040516020016108659190612f6c565b6040516020818303038152906040528051906020012060405160200161088a9061371c565b60405160208183030381529060405280519060200120036108fa5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816108f4919061330a565b506109d3565b8160405160200161090b9190612f6c565b6040516020818303038152906040528051906020012060405160200161093090613788565b60405160208183030381529060405280519060200120036109a05780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161099a919061330a565b506109d2565b6040517fbd293d9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b5b5b5b5b5b5b5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338e21cce336040518263ffffffff1660e01b8152600401610a3891906137b7565b602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906137fe565b610aaf576040517f512e6ab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061016001604052808b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200160001515815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610b52919061330a565b506020820151816001019081610b68919061330a565b506040820151816002019081610b7e919061330a565b506060820151816003019081610b94919061330a565b506080820151816004019081610baa919061330a565b5060a0820151816005019081610bc0919061330a565b5060c0820151816006019081610bd6919061330a565b5060e0820151816007019081610bec919061330a565b50610100820151816008019081610c03919061330a565b50610120820151816009019081610c1a919061330a565b5061014082015181600a0160006101000a81548160ff02191690831515021790555090505050505050505050505050565b6060600115156000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083604051610cda9190613867565b908152602001604051809103902060009054906101000a900460ff16151514610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f906138ca565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082604051610dc29190613867565b90815260200160405180910390208054610ddb90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613123565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b5050505050905092915050565b818180604051602001610e749190612f6c565b60405160208183030381529060405280519060200120600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051602001610f16919061396d565b6040516020818303038152906040528051906020012003610f63576040517f509c03e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82604051602001610f749190612f6c565b60405160208183030381529060405280519060200120600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516020016110169190613a08565b6040516020818303038152906040528051906020012014611063576040517ff70ea5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040516110ee9190613867565b908152602001604051809103902060006101000a81548160ff021916908315150217905550826040516111219190613867565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff458a6134491d63bea827b8e9366ebc67361bdd8733bc0e0e9ba1a23ac9a85dc60405160405180910390a450505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516112129190613867565b908152602001604051809103902060009054906101000a900460ff16611264576040517ff4ed8f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040516112ef9190613867565b90815260200160405180910390209081611309919061330a565b50505050565b60603373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611376576040517f0c6f7d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816040516020016113879190612f6c565b604051602081830303815290604052805190602001206040516020016113ac906130d4565b604051602081830303815290604052805190602001200361149957600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461141490613123565b80601f016020809104026020016040519081016040528092919081815260200182805461144090613123565b801561148d5780601f106114625761010080835404028352916020019161148d565b820191906000526020600020905b81548152906001019060200180831161147057829003601f168201915b50505050509050611f06565b816040516020016114aa9190612f6c565b604051602081830303815290604052805190602001206040516020016114cf90613428565b60405160208183030381529060405280519060200120036115bc57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461153790613123565b80601f016020809104026020016040519081016040528092919081815260200182805461156390613123565b80156115b05780601f10611585576101008083540402835291602001916115b0565b820191906000526020600020905b81548152906001019060200180831161159357829003601f168201915b50505050509050611f06565b816040516020016115cd9190612f6c565b604051602081830303815290604052805190602001206040516020016115f290613494565b60405160208183030381529060405280519060200120036116df57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805461165a90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461168690613123565b80156116d35780601f106116a8576101008083540402835291602001916116d3565b820191906000526020600020905b8154815290600101906020018083116116b657829003601f168201915b50505050509050611f06565b816040516020016116f09190612f6c565b6040516020818303038152906040528051906020012060405160200161171590613500565b604051602081830303815290604052805190602001200361180257600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805461177d90613123565b80601f01602080910402602001604051908101604052809291908181526020018280546117a990613123565b80156117f65780601f106117cb576101008083540402835291602001916117f6565b820191906000526020600020905b8154815290600101906020018083116117d957829003601f168201915b50505050509050611f06565b816040516020016118139190612f6c565b604051602081830303815290604052805190602001206040516020016118389061356c565b604051602081830303815290604052805190602001200361192557600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040180546118a090613123565b80601f01602080910402602001604051908101604052809291908181526020018280546118cc90613123565b80156119195780601f106118ee57610100808354040283529160200191611919565b820191906000526020600020905b8154815290600101906020018083116118fc57829003601f168201915b50505050509050611f06565b816040516020016119369190612f6c565b6040516020818303038152906040528051906020012060405160200161195b906135d8565b6040516020818303038152906040528051906020012003611a4857600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050180546119c390613123565b80601f01602080910402602001604051908101604052809291908181526020018280546119ef90613123565b8015611a3c5780601f10611a1157610100808354040283529160200191611a3c565b820191906000526020600020905b815481529060010190602001808311611a1f57829003601f168201915b50505050509050611f06565b81604051602001611a599190612f6c565b60405160208183030381529060405280519060200120604051602001611a7e90613644565b6040516020818303038152906040528051906020012003611b6b57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018054611ae690613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1290613123565b8015611b5f5780601f10611b3457610100808354040283529160200191611b5f565b820191906000526020600020905b815481529060010190602001808311611b4257829003601f168201915b50505050509050611f06565b81604051602001611b7c9190612f6c565b60405160208183030381529060405280519060200120604051602001611ba1906136b0565b6040516020818303038152906040528051906020012003611c8e57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018054611c0990613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3590613123565b8015611c825780601f10611c5757610100808354040283529160200191611c82565b820191906000526020600020905b815481529060010190602001808311611c6557829003601f168201915b50505050509050611f06565b81604051602001611c9f9190612f6c565b60405160208183030381529060405280519060200120604051602001611cc49061371c565b6040516020818303038152906040528051906020012003611db157600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018054611d2c90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5890613123565b8015611da55780601f10611d7a57610100808354040283529160200191611da5565b820191906000526020600020905b815481529060010190602001808311611d8857829003601f168201915b50505050509050611f06565b81604051602001611dc29190612f6c565b60405160208183030381529060405280519060200120604051602001611de790613788565b6040516020818303038152906040528051906020012003611ed457600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009018054611e4f90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7b90613123565b8015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b50505050509050611f06565b6040517f0d62c4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082604051611f979190613867565b908152602001604051809103902060009054906101000a900460ff1690509392505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081612045919061330a565b50806040516120549190613867565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f16d065f1eb4e9eb9d81ef1ac8d5a705b0e9446f547727b761afd319c8fe4e41660405160405180910390a45050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008061210f836121f3565b60405160200161211f9190613a97565b60405160208183030381529060405280519060200120905080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080915050919050565b60008060008061219385612877565b925092509250600186828585604051600081526020016040526040516121bc9493929190613ad9565b6020604051602081039080840390855afa1580156121de573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061016001604052908160008201805461225190613123565b80601f016020809104026020016040519081016040528092919081815260200182805461227d90613123565b80156122ca5780601f1061229f576101008083540402835291602001916122ca565b820191906000526020600020905b8154815290600101906020018083116122ad57829003601f168201915b505050505081526020016001820180546122e390613123565b80601f016020809104026020016040519081016040528092919081815260200182805461230f90613123565b801561235c5780601f106123315761010080835404028352916020019161235c565b820191906000526020600020905b81548152906001019060200180831161233f57829003601f168201915b5050505050815260200160028201805461237590613123565b80601f01602080910402602001604051908101604052809291908181526020018280546123a190613123565b80156123ee5780601f106123c3576101008083540402835291602001916123ee565b820191906000526020600020905b8154815290600101906020018083116123d157829003601f168201915b5050505050815260200160038201805461240790613123565b80601f016020809104026020016040519081016040528092919081815260200182805461243390613123565b80156124805780601f1061245557610100808354040283529160200191612480565b820191906000526020600020905b81548152906001019060200180831161246357829003601f168201915b5050505050815260200160048201805461249990613123565b80601f01602080910402602001604051908101604052809291908181526020018280546124c590613123565b80156125125780601f106124e757610100808354040283529160200191612512565b820191906000526020600020905b8154815290600101906020018083116124f557829003601f168201915b5050505050815260200160058201805461252b90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461255790613123565b80156125a45780601f10612579576101008083540402835291602001916125a4565b820191906000526020600020905b81548152906001019060200180831161258757829003601f168201915b505050505081526020016006820180546125bd90613123565b80601f01602080910402602001604051908101604052809291908181526020018280546125e990613123565b80156126365780601f1061260b57610100808354040283529160200191612636565b820191906000526020600020905b81548152906001019060200180831161261957829003601f168201915b5050505050815260200160078201805461264f90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461267b90613123565b80156126c85780601f1061269d576101008083540402835291602001916126c8565b820191906000526020600020905b8154815290600101906020018083116126ab57829003601f168201915b505050505081526020016008820180546126e190613123565b80601f016020809104026020016040519081016040528092919081815260200182805461270d90613123565b801561275a5780601f1061272f5761010080835404028352916020019161275a565b820191906000526020600020905b81548152906001019060200180831161273d57829003601f168201915b5050505050815260200160098201805461277390613123565b80601f016020809104026020016040519081016040528092919081815260200182805461279f90613123565b80156127ec5780601f106127c1576101008083540402835291602001916127ec565b820191906000526020600020905b8154815290600101906020018083116127cf57829003601f168201915b50505050508152602001600a820160009054906101000a900460ff1615151515815250509050806000015181602001518260400151836060015184608001518560a001518660e0015187610100015188610120015160405160200161285999989796959493929190613b1e565b60405160208183030381529060405280519060200120915050919050565b600080600060418451146128b7576040517f67d7c25e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612915826128ea565b9050919050565b6129258161290a565b811461293057600080fd5b50565b6000813590506129428161291c565b92915050565b60006020828403121561295e5761295d6128e0565b5b600061296c84828501612933565b91505092915050565b6000819050919050565b61298881612975565b82525050565b60006020820190506129a3600083018461297f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129fc826129b3565b810181811067ffffffffffffffff82111715612a1b57612a1a6129c4565b5b80604052505050565b6000612a2e6128d6565b9050612a3a82826129f3565b919050565b600067ffffffffffffffff821115612a5a57612a596129c4565b5b612a63826129b3565b9050602081019050919050565b82818337600083830152505050565b6000612a92612a8d84612a3f565b612a24565b905082815260208101848484011115612aae57612aad6129ae565b5b612ab9848285612a70565b509392505050565b600082601f830112612ad657612ad56129a9565b5b8135612ae6848260208601612a7f565b91505092915050565b60008060408385031215612b0657612b056128e0565b5b6000612b1485828601612933565b925050602083013567ffffffffffffffff811115612b3557612b346128e5565b5b612b4185828601612ac1565b9150509250929050565b60008115159050919050565b612b6081612b4b565b82525050565b6000602082019050612b7b6000830184612b57565b92915050565b600067ffffffffffffffff821115612b9c57612b9b6129c4565b5b612ba5826129b3565b9050602081019050919050565b6000612bc5612bc084612b81565b612a24565b905082815260208101848484011115612be157612be06129ae565b5b612bec848285612a70565b509392505050565b600082601f830112612c0957612c086129a9565b5b8135612c19848260208601612bb2565b91505092915050565b60008060408385031215612c3957612c386128e0565b5b600083013567ffffffffffffffff811115612c5757612c566128e5565b5b612c6385828601612bf4565b925050602083013567ffffffffffffffff811115612c8457612c836128e5565b5b612c9085828601612bf4565b9150509250929050565b6000806000806000806000806000806101408b8d031215612cbe57612cbd6128e0565b5b60008b013567ffffffffffffffff811115612cdc57612cdb6128e5565b5b612ce88d828e01612bf4565b9a505060208b013567ffffffffffffffff811115612d0957612d086128e5565b5b612d158d828e01612bf4565b99505060408b013567ffffffffffffffff811115612d3657612d356128e5565b5b612d428d828e01612bf4565b98505060608b013567ffffffffffffffff811115612d6357612d626128e5565b5b612d6f8d828e01612bf4565b97505060808b013567ffffffffffffffff811115612d9057612d8f6128e5565b5b612d9c8d828e01612bf4565b96505060a08b013567ffffffffffffffff811115612dbd57612dbc6128e5565b5b612dc98d828e01612bf4565b95505060c08b013567ffffffffffffffff811115612dea57612de96128e5565b5b612df68d828e01612bf4565b94505060e08b013567ffffffffffffffff811115612e1757612e166128e5565b5b612e238d828e01612bf4565b9350506101008b013567ffffffffffffffff811115612e4557612e446128e5565b5b612e518d828e01612bf4565b9250506101208b013567ffffffffffffffff811115612e7357612e726128e5565b5b612e7f8d828e01612bf4565b9150509295989b9194979a5092959850565b60008060408385031215612ea857612ea76128e0565b5b6000612eb685828601612933565b925050602083013567ffffffffffffffff811115612ed757612ed66128e5565b5b612ee385828601612bf4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f27578082015181840152602081019050612f0c565b60008484015250505050565b6000612f3e82612eed565b612f488185612ef8565b9350612f58818560208601612f09565b612f61816129b3565b840191505092915050565b60006020820190508181036000830152612f868184612f33565b905092915050565b600080600060608486031215612fa757612fa66128e0565b5b6000612fb586828701612933565b935050602084013567ffffffffffffffff811115612fd657612fd56128e5565b5b612fe286828701612bf4565b925050604084013567ffffffffffffffff811115613003576130026128e5565b5b61300f86828701612bf4565b9150509250925092565b600080600060608486031215613032576130316128e0565b5b600061304086828701612933565b935050602061305186828701612933565b925050604084013567ffffffffffffffff811115613072576130716128e5565b5b61307e86828701612bf4565b9150509250925092565b7f6e616d6500000000000000000000000000000000000000000000000000000000600082015250565b60006130be600483612ef8565b91506130c982613088565b602082019050919050565b600060208201905081810360008301526130ed816130b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061313b57607f821691505b60208210810361314e5761314d6130f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026131b67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613179565b6131c08683613179565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006132076132026131fd846131d8565b6131e2565b6131d8565b9050919050565b6000819050919050565b613221836131ec565b61323561322d8261320e565b848454613186565b825550505050565b600090565b61324a61323d565b613255818484613218565b505050565b5b818110156132795761326e600082613242565b60018101905061325b565b5050565b601f8211156132be5761328f81613154565b61329884613169565b810160208510156132a7578190505b6132bb6132b385613169565b83018261325a565b50505b505050565b600082821c905092915050565b60006132e1600019846008026132c3565b1980831691505092915050565b60006132fa83836132d0565b9150826002028217905092915050565b61331382612eed565b67ffffffffffffffff81111561332c5761332b6129c4565b5b6133368254613123565b61334182828561327d565b600060209050601f8311600181146133745760008415613362578287015190505b61336c85826132ee565b8655506133d4565b601f19841661338286613154565b60005b828110156133aa57848901518255600182019150602085019450602081019050613385565b868310156133c757848901516133c3601f8916826132d0565b8355505b6001600288020188555050505b505050505050565b7f6661746865725f6e616d65000000000000000000000000000000000000000000600082015250565b6000613412600b83612ef8565b915061341d826133dc565b602082019050919050565b6000602082019050818103600083015261344181613405565b9050919050565b7f6d6f746865725f6e616d65000000000000000000000000000000000000000000600082015250565b600061347e600b83612ef8565b915061348982613448565b602082019050919050565b600060208201905081810360008301526134ad81613471565b9050919050565b7f6772616e644661746865725f6e616d6500000000000000000000000000000000600082015250565b60006134ea601083612ef8565b91506134f5826134b4565b602082019050919050565b60006020820190508181036000830152613519816134dd565b9050919050565b7f70686f6e655f6e756d6265720000000000000000000000000000000000000000600082015250565b6000613556600c83612ef8565b915061356182613520565b602082019050919050565b6000602082019050818103600083015261358581613549565b9050919050565b7f646f620000000000000000000000000000000000000000000000000000000000600082015250565b60006135c2600383612ef8565b91506135cd8261358c565b602082019050919050565b600060208201905081810360008301526135f1816135b5565b9050919050565b7f626c6f6f645f67726f7570000000000000000000000000000000000000000000600082015250565b600061362e600b83612ef8565b9150613639826135f8565b602082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b7f636974697a656e736869705f6e756d6265720000000000000000000000000000600082015250565b600061369a601283612ef8565b91506136a582613664565b602082019050919050565b600060208201905081810360008301526136c98161368d565b9050919050565b7f70616e5f6e756d62657200000000000000000000000000000000000000000000600082015250565b6000613706600a83612ef8565b9150613711826136d0565b602082019050919050565b60006020820190508181036000830152613735816136f9565b9050919050565b7f6c6f636174696f6e000000000000000000000000000000000000000000000000600082015250565b6000613772600883612ef8565b915061377d8261373c565b602082019050919050565b600060208201905081810360008301526137a181613765565b9050919050565b6137b18161290a565b82525050565b60006020820190506137cc60008301846137a8565b92915050565b6137db81612b4b565b81146137e657600080fd5b50565b6000815190506137f8816137d2565b92915050565b600060208284031215613814576138136128e0565b5b6000613822848285016137e9565b91505092915050565b600081905092915050565b600061384182612eed565b61384b818561382b565b935061385b818560208601612f09565b80840191505092915050565b60006138738284613836565b915081905092915050565b7f6e6f742061636365737320796574000000000000000000000000000000000000600082015250565b60006138b4600e83612ef8565b91506138bf8261387e565b602082019050919050565b600060208201905081810360008301526138e3816138a7565b9050919050565b600081546138f781613123565b613901818661382b565b9450600182166000811461391c576001811461393157613964565b60ff1983168652811515820286019350613964565b61393a85613154565b60005b8381101561395c5781548189015260018201915060208101905061393d565b838801955050505b50505092915050565b600061397982846138ea565b915081905092915050565b6000815461399181613123565b61399b8186612ef8565b945060018216600081146139b657600181146139cc576139ff565b60ff1983168652811515602002860193506139ff565b6139d585613154565b60005b838110156139f7578154818901526001820191506020810190506139d8565b808801955050505b50505092915050565b60006020820190508181036000830152613a228184613984565b905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000613a60601c8361382b565b9150613a6b82613a2a565b601c82019050919050565b6000819050919050565b613a91613a8c82612975565b613a76565b82525050565b6000613aa282613a53565b9150613aae8284613a80565b60208201915081905092915050565b600060ff82169050919050565b613ad381613abd565b82525050565b6000608082019050613aee600083018761297f565b613afb6020830186613aca565b613b08604083018561297f565b613b15606083018461297f565b95945050505050565b6000613b2a828c613836565b9150613b36828b613836565b9150613b42828a613836565b9150613b4e8289613836565b9150613b5a8288613836565b9150613b668287613836565b9150613b728286613836565b9150613b7e8285613836565b9150613b8a8284613836565b91508190509a995050505050505050505056fea2646970667358221220db8dbf99f1feebb56cb03335c04a27ebc9c8652e608e9c36ae1894c00a4fad9064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063852beb5611610071578063852beb5614610176578063b5722cc714610192578063b5a89065146101ae578063df4f3547146101de578063f2aeb8521461020e578063ff841e0f1461022a576100a9565b806321a3f733146100ae5780634a41d1ac146100de57806351f1dd771461010e57806365ca9ba11461012a5780636ba4e0dc14610146575b600080fd5b6100c860048036038101906100c39190612948565b61025a565b6040516100d5919061298e565b60405180910390f35b6100f860048036038101906100f39190612aef565b61026c565b6040516101059190612b66565b60405180910390f35b61012860048036038101906101239190612c22565b610324565b005b610144600480360381019061013f9190612c9a565b6109df565b005b610160600480360381019061015b9190612e91565b610c4b565b60405161016d9190612f6c565b60405180910390f35b610190600480360381019061018b9190612e91565b610e61565b005b6101ac60048036038101906101a79190612f8e565b611189565b005b6101c860048036038101906101c39190612e91565b61130f565b6040516101d59190612f6c565b60405180910390f35b6101f860048036038101906101f39190613019565b611f0c565b6040516102059190612b66565b60405180910390f35b61022860048036038101906102239190612e91565b611fbc565b005b610244600480360381019061023f9190612948565b6120ba565b604051610251919061298e565b60405180910390f35b600061026582612103565b9050919050565b60008061027884612103565b90508373ffffffffffffffffffffffffffffffffffffffff1661029b8285612184565b73ffffffffffffffffffffffffffffffffffffffff1603610318576001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a0160006101000a81548160ff021916908315150217905591505061031e565b60009150505b92915050565b816040516020016103359190612f6c565b6040516020818303038152906040528051906020012060405160200161035a906130d4565b60405160208183030381529060405280519060200120036103ca5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816103c4919061330a565b506109db565b816040516020016103db9190612f6c565b6040516020818303038152906040528051906020012060405160200161040090613428565b60405160208183030381529060405280519060200120036104705780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161046a919061330a565b506109da565b816040516020016104819190612f6c565b604051602081830303815290604052805190602001206040516020016104a690613494565b60405160208183030381529060405280519060200120036105165780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019081610510919061330a565b506109d9565b816040516020016105279190612f6c565b6040516020818303038152906040528051906020012060405160200161054c90613500565b60405160208183030381529060405280519060200120036105bc5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816105b6919061330a565b506109d8565b816040516020016105cd9190612f6c565b604051602081830303815290604052805190602001206040516020016105f29061356c565b60405160208183030381529060405280519060200120036106625780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161065c919061330a565b506109d7565b816040516020016106739190612f6c565b60405160208183030381529060405280519060200120604051602001610698906135d8565b60405160208183030381529060405280519060200120036107085780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019081610702919061330a565b506109d6565b816040516020016107199190612f6c565b6040516020818303038152906040528051906020012060405160200161073e90613644565b60405160208183030381529060405280519060200120036107ae5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816107a8919061330a565b506109d5565b816040516020016107bf9190612f6c565b604051602081830303815290604052805190602001206040516020016107e4906136b0565b60405160208183030381529060405280519060200120036108545780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161084e919061330a565b506109d4565b816040516020016108659190612f6c565b6040516020818303038152906040528051906020012060405160200161088a9061371c565b60405160208183030381529060405280519060200120036108fa5780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816108f4919061330a565b506109d3565b8160405160200161090b9190612f6c565b6040516020818303038152906040528051906020012060405160200161093090613788565b60405160208183030381529060405280519060200120036109a05780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908161099a919061330a565b506109d2565b6040517fbd293d9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b5b5b5b5b5b5b5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338e21cce336040518263ffffffff1660e01b8152600401610a3891906137b7565b602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906137fe565b610aaf576040517f512e6ab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061016001604052808b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200160001515815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610b52919061330a565b506020820151816001019081610b68919061330a565b506040820151816002019081610b7e919061330a565b506060820151816003019081610b94919061330a565b506080820151816004019081610baa919061330a565b5060a0820151816005019081610bc0919061330a565b5060c0820151816006019081610bd6919061330a565b5060e0820151816007019081610bec919061330a565b50610100820151816008019081610c03919061330a565b50610120820151816009019081610c1a919061330a565b5061014082015181600a0160006101000a81548160ff02191690831515021790555090505050505050505050505050565b6060600115156000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083604051610cda9190613867565b908152602001604051809103902060009054906101000a900460ff16151514610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f906138ca565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082604051610dc29190613867565b90815260200160405180910390208054610ddb90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0790613123565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b5050505050905092915050565b818180604051602001610e749190612f6c565b60405160208183030381529060405280519060200120600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051602001610f16919061396d565b6040516020818303038152906040528051906020012003610f63576040517f509c03e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82604051602001610f749190612f6c565b60405160208183030381529060405280519060200120600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516020016110169190613a08565b6040516020818303038152906040528051906020012014611063576040517ff70ea5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040516110ee9190613867565b908152602001604051809103902060006101000a81548160ff021916908315150217905550826040516111219190613867565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff458a6134491d63bea827b8e9366ebc67361bdd8733bc0e0e9ba1a23ac9a85dc60405160405180910390a450505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516112129190613867565b908152602001604051809103902060009054906101000a900460ff16611264576040517ff4ed8f1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040516112ef9190613867565b90815260200160405180910390209081611309919061330a565b50505050565b60603373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611376576040517f0c6f7d1100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816040516020016113879190612f6c565b604051602081830303815290604052805190602001206040516020016113ac906130d4565b604051602081830303815290604052805190602001200361149957600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461141490613123565b80601f016020809104026020016040519081016040528092919081815260200182805461144090613123565b801561148d5780601f106114625761010080835404028352916020019161148d565b820191906000526020600020905b81548152906001019060200180831161147057829003601f168201915b50505050509050611f06565b816040516020016114aa9190612f6c565b604051602081830303815290604052805190602001206040516020016114cf90613428565b60405160208183030381529060405280519060200120036115bc57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461153790613123565b80601f016020809104026020016040519081016040528092919081815260200182805461156390613123565b80156115b05780601f10611585576101008083540402835291602001916115b0565b820191906000526020600020905b81548152906001019060200180831161159357829003601f168201915b50505050509050611f06565b816040516020016115cd9190612f6c565b604051602081830303815290604052805190602001206040516020016115f290613494565b60405160208183030381529060405280519060200120036116df57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805461165a90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461168690613123565b80156116d35780601f106116a8576101008083540402835291602001916116d3565b820191906000526020600020905b8154815290600101906020018083116116b657829003601f168201915b50505050509050611f06565b816040516020016116f09190612f6c565b6040516020818303038152906040528051906020012060405160200161171590613500565b604051602081830303815290604052805190602001200361180257600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805461177d90613123565b80601f01602080910402602001604051908101604052809291908181526020018280546117a990613123565b80156117f65780601f106117cb576101008083540402835291602001916117f6565b820191906000526020600020905b8154815290600101906020018083116117d957829003601f168201915b50505050509050611f06565b816040516020016118139190612f6c565b604051602081830303815290604052805190602001206040516020016118389061356c565b604051602081830303815290604052805190602001200361192557600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040180546118a090613123565b80601f01602080910402602001604051908101604052809291908181526020018280546118cc90613123565b80156119195780601f106118ee57610100808354040283529160200191611919565b820191906000526020600020905b8154815290600101906020018083116118fc57829003601f168201915b50505050509050611f06565b816040516020016119369190612f6c565b6040516020818303038152906040528051906020012060405160200161195b906135d8565b6040516020818303038152906040528051906020012003611a4857600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050180546119c390613123565b80601f01602080910402602001604051908101604052809291908181526020018280546119ef90613123565b8015611a3c5780601f10611a1157610100808354040283529160200191611a3c565b820191906000526020600020905b815481529060010190602001808311611a1f57829003601f168201915b50505050509050611f06565b81604051602001611a599190612f6c565b60405160208183030381529060405280519060200120604051602001611a7e90613644565b6040516020818303038152906040528051906020012003611b6b57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018054611ae690613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1290613123565b8015611b5f5780601f10611b3457610100808354040283529160200191611b5f565b820191906000526020600020905b815481529060010190602001808311611b4257829003601f168201915b50505050509050611f06565b81604051602001611b7c9190612f6c565b60405160208183030381529060405280519060200120604051602001611ba1906136b0565b6040516020818303038152906040528051906020012003611c8e57600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018054611c0990613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3590613123565b8015611c825780601f10611c5757610100808354040283529160200191611c82565b820191906000526020600020905b815481529060010190602001808311611c6557829003601f168201915b50505050509050611f06565b81604051602001611c9f9190612f6c565b60405160208183030381529060405280519060200120604051602001611cc49061371c565b6040516020818303038152906040528051906020012003611db157600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018054611d2c90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5890613123565b8015611da55780601f10611d7a57610100808354040283529160200191611da5565b820191906000526020600020905b815481529060010190602001808311611d8857829003601f168201915b50505050509050611f06565b81604051602001611dc29190612f6c565b60405160208183030381529060405280519060200120604051602001611de790613788565b6040516020818303038152906040528051906020012003611ed457600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009018054611e4f90613123565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7b90613123565b8015611ec85780601f10611e9d57610100808354040283529160200191611ec8565b820191906000526020600020905b815481529060010190602001808311611eab57829003601f168201915b50505050509050611f06565b6040517f0d62c4d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082604051611f979190613867565b908152602001604051809103902060009054906101000a900460ff1690509392505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081612045919061330a565b50806040516120549190613867565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f16d065f1eb4e9eb9d81ef1ac8d5a705b0e9446f547727b761afd319c8fe4e41660405160405180910390a45050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008061210f836121f3565b60405160200161211f9190613a97565b60405160208183030381529060405280519060200120905080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080915050919050565b60008060008061219385612877565b925092509250600186828585604051600081526020016040526040516121bc9493929190613ad9565b6020604051602081039080840390855afa1580156121de573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061016001604052908160008201805461225190613123565b80601f016020809104026020016040519081016040528092919081815260200182805461227d90613123565b80156122ca5780601f1061229f576101008083540402835291602001916122ca565b820191906000526020600020905b8154815290600101906020018083116122ad57829003601f168201915b505050505081526020016001820180546122e390613123565b80601f016020809104026020016040519081016040528092919081815260200182805461230f90613123565b801561235c5780601f106123315761010080835404028352916020019161235c565b820191906000526020600020905b81548152906001019060200180831161233f57829003601f168201915b5050505050815260200160028201805461237590613123565b80601f01602080910402602001604051908101604052809291908181526020018280546123a190613123565b80156123ee5780601f106123c3576101008083540402835291602001916123ee565b820191906000526020600020905b8154815290600101906020018083116123d157829003601f168201915b5050505050815260200160038201805461240790613123565b80601f016020809104026020016040519081016040528092919081815260200182805461243390613123565b80156124805780601f1061245557610100808354040283529160200191612480565b820191906000526020600020905b81548152906001019060200180831161246357829003601f168201915b5050505050815260200160048201805461249990613123565b80601f01602080910402602001604051908101604052809291908181526020018280546124c590613123565b80156125125780601f106124e757610100808354040283529160200191612512565b820191906000526020600020905b8154815290600101906020018083116124f557829003601f168201915b5050505050815260200160058201805461252b90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461255790613123565b80156125a45780601f10612579576101008083540402835291602001916125a4565b820191906000526020600020905b81548152906001019060200180831161258757829003601f168201915b505050505081526020016006820180546125bd90613123565b80601f01602080910402602001604051908101604052809291908181526020018280546125e990613123565b80156126365780601f1061260b57610100808354040283529160200191612636565b820191906000526020600020905b81548152906001019060200180831161261957829003601f168201915b5050505050815260200160078201805461264f90613123565b80601f016020809104026020016040519081016040528092919081815260200182805461267b90613123565b80156126c85780601f1061269d576101008083540402835291602001916126c8565b820191906000526020600020905b8154815290600101906020018083116126ab57829003601f168201915b505050505081526020016008820180546126e190613123565b80601f016020809104026020016040519081016040528092919081815260200182805461270d90613123565b801561275a5780601f1061272f5761010080835404028352916020019161275a565b820191906000526020600020905b81548152906001019060200180831161273d57829003601f168201915b5050505050815260200160098201805461277390613123565b80601f016020809104026020016040519081016040528092919081815260200182805461279f90613123565b80156127ec5780601f106127c1576101008083540402835291602001916127ec565b820191906000526020600020905b8154815290600101906020018083116127cf57829003601f168201915b50505050508152602001600a820160009054906101000a900460ff1615151515815250509050806000015181602001518260400151836060015184608001518560a001518660e0015187610100015188610120015160405160200161285999989796959493929190613b1e565b60405160208183030381529060405280519060200120915050919050565b600080600060418451146128b7576040517f67d7c25e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612915826128ea565b9050919050565b6129258161290a565b811461293057600080fd5b50565b6000813590506129428161291c565b92915050565b60006020828403121561295e5761295d6128e0565b5b600061296c84828501612933565b91505092915050565b6000819050919050565b61298881612975565b82525050565b60006020820190506129a3600083018461297f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129fc826129b3565b810181811067ffffffffffffffff82111715612a1b57612a1a6129c4565b5b80604052505050565b6000612a2e6128d6565b9050612a3a82826129f3565b919050565b600067ffffffffffffffff821115612a5a57612a596129c4565b5b612a63826129b3565b9050602081019050919050565b82818337600083830152505050565b6000612a92612a8d84612a3f565b612a24565b905082815260208101848484011115612aae57612aad6129ae565b5b612ab9848285612a70565b509392505050565b600082601f830112612ad657612ad56129a9565b5b8135612ae6848260208601612a7f565b91505092915050565b60008060408385031215612b0657612b056128e0565b5b6000612b1485828601612933565b925050602083013567ffffffffffffffff811115612b3557612b346128e5565b5b612b4185828601612ac1565b9150509250929050565b60008115159050919050565b612b6081612b4b565b82525050565b6000602082019050612b7b6000830184612b57565b92915050565b600067ffffffffffffffff821115612b9c57612b9b6129c4565b5b612ba5826129b3565b9050602081019050919050565b6000612bc5612bc084612b81565b612a24565b905082815260208101848484011115612be157612be06129ae565b5b612bec848285612a70565b509392505050565b600082601f830112612c0957612c086129a9565b5b8135612c19848260208601612bb2565b91505092915050565b60008060408385031215612c3957612c386128e0565b5b600083013567ffffffffffffffff811115612c5757612c566128e5565b5b612c6385828601612bf4565b925050602083013567ffffffffffffffff811115612c8457612c836128e5565b5b612c9085828601612bf4565b9150509250929050565b6000806000806000806000806000806101408b8d031215612cbe57612cbd6128e0565b5b60008b013567ffffffffffffffff811115612cdc57612cdb6128e5565b5b612ce88d828e01612bf4565b9a505060208b013567ffffffffffffffff811115612d0957612d086128e5565b5b612d158d828e01612bf4565b99505060408b013567ffffffffffffffff811115612d3657612d356128e5565b5b612d428d828e01612bf4565b98505060608b013567ffffffffffffffff811115612d6357612d626128e5565b5b612d6f8d828e01612bf4565b97505060808b013567ffffffffffffffff811115612d9057612d8f6128e5565b5b612d9c8d828e01612bf4565b96505060a08b013567ffffffffffffffff811115612dbd57612dbc6128e5565b5b612dc98d828e01612bf4565b95505060c08b013567ffffffffffffffff811115612dea57612de96128e5565b5b612df68d828e01612bf4565b94505060e08b013567ffffffffffffffff811115612e1757612e166128e5565b5b612e238d828e01612bf4565b9350506101008b013567ffffffffffffffff811115612e4557612e446128e5565b5b612e518d828e01612bf4565b9250506101208b013567ffffffffffffffff811115612e7357612e726128e5565b5b612e7f8d828e01612bf4565b9150509295989b9194979a5092959850565b60008060408385031215612ea857612ea76128e0565b5b6000612eb685828601612933565b925050602083013567ffffffffffffffff811115612ed757612ed66128e5565b5b612ee385828601612bf4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f27578082015181840152602081019050612f0c565b60008484015250505050565b6000612f3e82612eed565b612f488185612ef8565b9350612f58818560208601612f09565b612f61816129b3565b840191505092915050565b60006020820190508181036000830152612f868184612f33565b905092915050565b600080600060608486031215612fa757612fa66128e0565b5b6000612fb586828701612933565b935050602084013567ffffffffffffffff811115612fd657612fd56128e5565b5b612fe286828701612bf4565b925050604084013567ffffffffffffffff811115613003576130026128e5565b5b61300f86828701612bf4565b9150509250925092565b600080600060608486031215613032576130316128e0565b5b600061304086828701612933565b935050602061305186828701612933565b925050604084013567ffffffffffffffff811115613072576130716128e5565b5b61307e86828701612bf4565b9150509250925092565b7f6e616d6500000000000000000000000000000000000000000000000000000000600082015250565b60006130be600483612ef8565b91506130c982613088565b602082019050919050565b600060208201905081810360008301526130ed816130b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061313b57607f821691505b60208210810361314e5761314d6130f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026131b67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613179565b6131c08683613179565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006132076132026131fd846131d8565b6131e2565b6131d8565b9050919050565b6000819050919050565b613221836131ec565b61323561322d8261320e565b848454613186565b825550505050565b600090565b61324a61323d565b613255818484613218565b505050565b5b818110156132795761326e600082613242565b60018101905061325b565b5050565b601f8211156132be5761328f81613154565b61329884613169565b810160208510156132a7578190505b6132bb6132b385613169565b83018261325a565b50505b505050565b600082821c905092915050565b60006132e1600019846008026132c3565b1980831691505092915050565b60006132fa83836132d0565b9150826002028217905092915050565b61331382612eed565b67ffffffffffffffff81111561332c5761332b6129c4565b5b6133368254613123565b61334182828561327d565b600060209050601f8311600181146133745760008415613362578287015190505b61336c85826132ee565b8655506133d4565b601f19841661338286613154565b60005b828110156133aa57848901518255600182019150602085019450602081019050613385565b868310156133c757848901516133c3601f8916826132d0565b8355505b6001600288020188555050505b505050505050565b7f6661746865725f6e616d65000000000000000000000000000000000000000000600082015250565b6000613412600b83612ef8565b915061341d826133dc565b602082019050919050565b6000602082019050818103600083015261344181613405565b9050919050565b7f6d6f746865725f6e616d65000000000000000000000000000000000000000000600082015250565b600061347e600b83612ef8565b915061348982613448565b602082019050919050565b600060208201905081810360008301526134ad81613471565b9050919050565b7f6772616e644661746865725f6e616d6500000000000000000000000000000000600082015250565b60006134ea601083612ef8565b91506134f5826134b4565b602082019050919050565b60006020820190508181036000830152613519816134dd565b9050919050565b7f70686f6e655f6e756d6265720000000000000000000000000000000000000000600082015250565b6000613556600c83612ef8565b915061356182613520565b602082019050919050565b6000602082019050818103600083015261358581613549565b9050919050565b7f646f620000000000000000000000000000000000000000000000000000000000600082015250565b60006135c2600383612ef8565b91506135cd8261358c565b602082019050919050565b600060208201905081810360008301526135f1816135b5565b9050919050565b7f626c6f6f645f67726f7570000000000000000000000000000000000000000000600082015250565b600061362e600b83612ef8565b9150613639826135f8565b602082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b7f636974697a656e736869705f6e756d6265720000000000000000000000000000600082015250565b600061369a601283612ef8565b91506136a582613664565b602082019050919050565b600060208201905081810360008301526136c98161368d565b9050919050565b7f70616e5f6e756d62657200000000000000000000000000000000000000000000600082015250565b6000613706600a83612ef8565b9150613711826136d0565b602082019050919050565b60006020820190508181036000830152613735816136f9565b9050919050565b7f6c6f636174696f6e000000000000000000000000000000000000000000000000600082015250565b6000613772600883612ef8565b915061377d8261373c565b602082019050919050565b600060208201905081810360008301526137a181613765565b9050919050565b6137b18161290a565b82525050565b60006020820190506137cc60008301846137a8565b92915050565b6137db81612b4b565b81146137e657600080fd5b50565b6000815190506137f8816137d2565b92915050565b600060208284031215613814576138136128e0565b5b6000613822848285016137e9565b91505092915050565b600081905092915050565b600061384182612eed565b61384b818561382b565b935061385b818560208601612f09565b80840191505092915050565b60006138738284613836565b915081905092915050565b7f6e6f742061636365737320796574000000000000000000000000000000000000600082015250565b60006138b4600e83612ef8565b91506138bf8261387e565b602082019050919050565b600060208201905081810360008301526138e3816138a7565b9050919050565b600081546138f781613123565b613901818661382b565b9450600182166000811461391c576001811461393157613964565b60ff1983168652811515820286019350613964565b61393a85613154565b60005b8381101561395c5781548189015260018201915060208101905061393d565b838801955050505b50505092915050565b600061397982846138ea565b915081905092915050565b6000815461399181613123565b61399b8186612ef8565b945060018216600081146139b657600181146139cc576139ff565b60ff1983168652811515602002860193506139ff565b6139d585613154565b60005b838110156139f7578154818901526001820191506020810190506139d8565b808801955050505b50505092915050565b60006020820190508181036000830152613a228184613984565b905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000613a60601c8361382b565b9150613a6b82613a2a565b601c82019050919050565b6000819050919050565b613a91613a8c82612975565b613a76565b82525050565b6000613aa282613a53565b9150613aae8284613a80565b60208201915081905092915050565b600060ff82169050919050565b613ad381613abd565b82525050565b6000608082019050613aee600083018761297f565b613afb6020830186613aca565b613b08604083018561297f565b613b15606083018461297f565b95945050505050565b6000613b2a828c613836565b9150613b36828b613836565b9150613b42828a613836565b9150613b4e8289613836565b9150613b5a8288613836565b9150613b668287613836565b9150613b728286613836565b9150613b7e8285613836565b9150613b8a8284613836565b91508190509a995050505050505050505056fea2646970667358221220db8dbf99f1feebb56cb03335c04a27ebc9c8652e608e9c36ae1894c00a4fad9064736f6c63430008110033",
  "devdoc": {
    "author": "Spoodermandaleon",
    "kind": "dev",
    "methods": {
      "approveCondition(address,address,string)": {
        "params": {
          "dataProvider": "address who provide specific kyc data to requestor",
          "dataRequester": "address of data Requester"
        }
      },
      "generateHash(address)": {
        "params": {
          "dataProviderAddress": "It is address of the User who filled the Kyc details"
        },
        "returns": {
          "_0": "message digest of signature"
        }
      },
      "getEthHashedData(address)": {
        "params": {
          "dataProviderAddress": "It is the signer of Kyc data or KYC provider."
        },
        "returns": {
          "_0": "messageDigest of KYC_details"
        }
      },
      "grantAccessToRequester(address,string)": {
        "params": {
          "data": "represent the data specific Kyc data field that requestor requesting",
          "dataRequester": "address of the dataRequestor"
        }
      },
      "requestApproveFromDataProvider(address,string)": {
        "params": {
          "data": "shows the requested Kyc data field that is requested by data Requestor",
          "dataProvider": "who represent the address of data Provider who fill the KYC data"
        }
      },
      "setUserData(string,string,string,string,string,string,string,string,string,string)": {
        "params": {
          "_blood_group": "User's Blood Group",
          "_citizenship_number": "User's CitizenShip_number",
          "_dob": "User's Date of Birth",
          "_father_name": "User's Father Name",
          "_grandFather_name": "User's GrandFather Name",
          "_location": "User's Location",
          "_mother_name": "User's Mother Name",
          "_name": "User's Name",
          "_pan_number": "User's pan Number",
          "_phone_number": "User's Phone_Number details"
        }
      },
      "updateKYCDetails(string,string)": {
        "params": {
          "data": "that need to be update",
          "kycField": "This represent the specific field of KYC form such as name, dob and so forth"
        }
      },
      "verify(address,bytes)": {
        "params": {
          "dataProviderAddress": "It is address of the User who filled the Kyc details"
        },
        "returns": {
          "_0": "bool true if it signed by correct signer or false"
        }
      }
    },
    "title": "KYC Interaction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveCondition(address,address,string)": {
        "notice": "approveCondition is just a getter function to receieve whether it is approved or not"
      },
      "generateHash(address)": {
        "notice": "generateHash is call the getEthSignedMessageHash and retun the hashed signature of"
      },
      "getEthHashedData(address)": {
        "notice": "getEthhashedData is getter function which react the hashData from storage variable who is mapped through address"
      },
      "getUserData(address,string)": {
        "notice": "Requestor first need to get approved to view data"
      },
      "grantAccessToRequester(address,string)": {
        "notice": "grantAccessToRequester grant the permission to DataRequestor"
      },
      "requestApproveFromDataProvider(address,string)": {
        "notice": "requestApproveFromDataProvide helps to recieve data ie kyc data from the data Provider"
      },
      "setUserData(string,string,string,string,string,string,string,string,string,string)": {
        "notice": "SetUserData is used to set User data and mapped to it address"
      },
      "updateKYCDetails(string,string)": {
        "notice": "UpdateKycDetails is function which updatee the specific KYC data ."
      },
      "verify(address,bytes)": {
        "notice": "Verify whether the Kyc details is signed by the right DataProviderAddress"
      }
    },
    "notice": "KYC is place where user come and fill the kyc details and user can request to view other user's KYC",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3746,
        "contract": "contracts/core/KYC.sol:KYC",
        "label": "_Approve",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool)))"
      },
      {
        "astId": 3753,
        "contract": "contracts/core/KYC.sol:KYC",
        "label": "_RequestedData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_string_storage))"
      },
      {
        "astId": 2665,
        "contract": "contracts/core/KYC.sol:KYC",
        "label": "s_userEncryptedInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserDetail)4044_storage)"
      },
      {
        "astId": 2670,
        "contract": "contracts/core/KYC.sol:KYC",
        "label": "s_hashedData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 2678,
        "contract": "contracts/core/KYC.sol:KYC",
        "label": "retievableData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_string_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(string => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(string => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_string_storage)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(UserDetail)4044_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Types.UserDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDetail)4044_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserDetail)4044_storage": {
        "encoding": "inplace",
        "label": "struct Types.UserDetail",
        "members": [
          {
            "astId": 4023,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4025,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "father_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4027,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "mother_name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4029,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "grandFather_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4031,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "phone_number",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4033,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "dob",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4035,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "blood_group",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 4037,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "citizenship_number",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4039,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "pan_number",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 4041,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "location",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 4043,
            "contract": "contracts/core/KYC.sol:KYC",
            "label": "isVerified",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      }
    }
  }
}